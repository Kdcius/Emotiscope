// Configuration Constants
const SETTING_UPDATE_HZ = 60;
const WEBSOCKET_CLIENT_PING_HZ = 5;
const CONNECTION_ATTEMPT_HZ = 2;

// WebSocket URI
var ws_uri = "ws://192.168.1.44:80/ws";

// Global Variables
var configuration = {
	"brightness": 1.00,
	"speed": 8.00
};

var last_ping = 0;
var connection_established = false;
var connection_established_time_ms = 0;
var disconnect_time_ms = 0;
var ping_loop;
var connect_loop;
var ws;
var message_history = [];

function render_messages(){
	var message_bin = document.getElementById("messages_bin");
	message_bin.innerHTML = "";
	for(var i = 0; i < message_history.length; i++){
		message_bin.innerHTML += message_history[i];
		message_bin.innerHTML += "<br>";
	}
}

function print_message(message){
	while(message_history.length > 10){
		message_history.shift();
	}

	message_history.push(message);

	render_messages();
}

// Check and transmit setting updates
function check_setting_updates() {
	for (let setting_name in configuration) {
		try{
			let value = parseFloat(document.getElementById(setting_name).value);
			if (value != configuration[setting_name]) {
				transmit("set|" + setting_name + "|" + value.toFixed(3));
				configuration[setting_name] = value;
			}
		}
		catch(e){
			//console.log(e);
		}
	}
}

// Initialize WebSocket connection
function init_websocket() {
	ws = new WebSocket(ws_uri);
	ws.onopen = function(evt) { console.log("onopen"); };
	ws.onclose = function(evt) { console.log("onclose"); };
	ws.onmessage = function(evt) { handle_message(evt); };
	ws.onerror = function(evt) { 
		console.error("WebSocket Error: " + evt.data);
		disconnect_websocket(); 
	};
}

function parse_command(message){
	var command_data = message.split("|");
	var command_type = command_data[0];

	if(command_type == "clear_modes"){
		document.getElementById("mode_bin").innerHTML = "";
	}
	else if(command_type == "new_mode"){
		var mode_name = command_data[1];
		var mode_button = "<button class=\"mode_button\" onclick=\"transmit('set|mode|"+mode_name+"')\">"+mode_name+"</button>";
		document.getElementById("mode_bin").innerHTML += mode_button;
	}
	else if(command_type == "clear_sliders"){
		document.getElementById("slider_bin").innerHTML = "";
	}
	else if(command_type == "new_slider"){
		var slider_bin   = document.getElementById("slider_bin");
		var slider_name  = command_data[1];
		var slider_min   = command_data[2];
		var slider_max   = command_data[3];
		var slider_step  = command_data[4];
		var slider_label = "<div class=\"slider_label\">"+slider_name.toUpperCase()+"</div>";
		var slider       = "<input type=\"range\" class=\"slider\" id=\""+slider_name+"\" min=\""+slider_min+"\" max=\""+slider_max+"\" step=\""+slider_step+"\">";
		slider_bin.innerHTML += slider_label;
		slider_bin.innerHTML += slider;
	}
	else if(command_type == "mode_ready"){
		transmit("get|sliders");
	}
}

// Handle incoming WebSocket messages
function handle_message(evt) {
	var message = evt.data;
	console.log("RX: " + message);
	if (message == "ping") {
		process_ping();
	}
	else{
		parse_command(message);
		print_message(message);
	}
}

function send_custom_command(){
	var custom_command = document.getElementById("custom_command").value;
	transmit(custom_command);
}

// Process incoming ping and maintain connection
function process_ping() {
	transmit("pong");
	last_ping = performance.now();
	if (!connection_established) {
		document.getElementById('websocket_status').innerText = 'Connected';
		connection_established = true;
		connection_established_time_ms = performance.now();
		check_ping();
		ping_loop = setInterval(check_ping, 1000 / WEBSOCKET_CLIENT_PING_HZ);
		clearInterval(connect_loop);
		transmit("get|sliders");
		transmit("get|modes");
	}
}

// Disconnect WebSocket connection
function disconnect_websocket() {
	if (ws) {
		ws.close();
		document.getElementById('websocket_status').innerText = 'Disconnected after ' + parseInt(disconnect_time_ms - connection_established_time_ms) + 'ms uptime';
		disconnect_time_ms = performance.now();
		connection_established = false;
		clearInterval(ping_loop);
		connect_loop = setInterval(attempt_connection, 1000 / CONNECTION_ATTEMPT_HZ);
	}

	location.reload();
}

// Transmit message via WebSocket
function transmit(message) {
	if (ws.readyState === WebSocket.OPEN) {
		ws.send(message);
		console.log("TX: " + message);
	}
}

// Check if ping is received in time
function check_ping() {
	var t_now_ms = performance.now();
	if (t_now_ms - last_ping >= 1000 / WEBSOCKET_CLIENT_PING_HZ * 4) {
		console.log("DID NOT GET PING IN TIME");
		disconnect_websocket();
	}
}

// Attempt to establish a WebSocket connection
function attempt_connection() {
	init_websocket();
}

function reset_device(){
	transmit("reset");
}

// Start communication once page is loaded
window.onload = function() {
	// Set intervals for checking settings and attempting connection
	setInterval(check_setting_updates, 1000 / SETTING_UPDATE_HZ);
	connect_loop = setInterval(attempt_connection, 1000 / CONNECTION_ATTEMPT_HZ);

	// Initialize WebSocket connection
	init_websocket();
};